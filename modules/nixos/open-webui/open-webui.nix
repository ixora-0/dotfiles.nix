# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }: {
  # TODO: Add option to disable certain containers.

  # Runtime
  virtualisation.docker.enable = true;
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."open-webui-ollama" = {
    image = "ollama/ollama";
    volumes = [
      "/home/ixora/intaa/ollama_models:/root/.ollama/models:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=nvidia.com/gpu=all"
      "--network-alias=ollama"
      "--network=open-webui-network"
    ];
  };
  systemd.services."docker-open-webui-ollama" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-open-webui-network.service"
    ];
    requires = [
      "docker-network-open-webui-network.service"
    ];
    partOf = [
      "docker-compose-open-webui-root.target"
    ];
    wantedBy = [
      "docker-compose-open-webui-root.target"
    ];
  };
  virtualisation.oci-containers.containers."open-webui-openedai-speech" = {
    image = "ghcr.io/matatonic/openedai-speech";
    environment = {
      "HF_HOME" = "/home/ixora/intaa/openedai-speech/voices";
      "TTS_HOME" = "/home/ixora/intaa/openedai-speech/voices";
    };
    volumes = [
      "/home/ixora/intaa/openedai-speech/config:/app/config:rw"
      "/home/ixora/intaa/openedai-speech/voices:/app/voices:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=nvidia.com/gpu=all"
      "--network-alias=openedai-speech"
      "--network=open-webui-network"
    ];
  };
  systemd.services."docker-open-webui-openedai-speech" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-open-webui-network.service"
    ];
    requires = [
      "docker-network-open-webui-network.service"
    ];
    partOf = [
      "docker-compose-open-webui-root.target"
    ];
    wantedBy = [
      "docker-compose-open-webui-root.target"
    ];
  };
  virtualisation.oci-containers.containers."open-webui" = {
    image = "ghcr.io/open-webui/open-webui:main";
    environment = {
      "PORT" = "3000";
      "OLLAMA_BASE_URL" = "http://ollama:11434";
      "AUDIO_TTS_ENGINE" = "openai";
      "AUDIO_TTS_OPENAI_API_BASE_URL" = "http://openedai-speech:8000/v1";
      "AUDIO_TTS_OPENAI_API_KEY" = "sk-111111111";
    };
    volumes = [
      "/home/ixora/intaa/open-webui/data:/app/backend/data:rw"
    ];
    ports = [
      "3000:3000/tcp"
    ];
    dependsOn = [
      "open-webui-ollama"
      "open-webui-openedai-speech"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=open-webui"
      "--network=open-webui-network"
    ];
  };
  systemd.services."docker-open-webui" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-open-webui-network.service"
    ];
    requires = [
      "docker-network-open-webui-network.service"
    ];
    partOf = [
      "docker-compose-open-webui-root.target"
    ];
    wantedBy = [
      "docker-compose-open-webui-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-open-webui-network" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f open-webui-network";
    };
    script = ''
      docker network inspect open-webui-network || docker network create open-webui-network
    '';
    partOf = [ "docker-compose-open-webui-root.target" ];
    wantedBy = [ "docker-compose-open-webui-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-open-webui-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
